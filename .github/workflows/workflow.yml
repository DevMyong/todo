name: CI/CD Pipeline - Pull Request Event

on:
  workflow_dispatch:

env:
  GO_VERSION: 1.23

jobs:
  decrement-labels:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Run d-day-labeler Action
        uses: devmyong/d-day-labeler@latest

          #  versioning-and-deploy:
          #    runs-on: ubuntu-latest
          #
          #    steps:
          #      - name: Checkout code
          #        uses: actions/checkout@v2
          #
          #      - name: Set up Go
          #        uses: actions/setup-go@v2
          #        with:
          #          go-version: GO_VERSION
          #
          #      - name: Run tests
          #        run: go test ./...
          #
          #      - name: Determine the new version based on commits
          #        run: |
          #           Get the latest Git tag and determine the new version
          #          TAG=$(git describe --tags --abbrev=0)
          #          echo "Current tag: $TAG"
          #
          #           Extract the major, minor, patch versions
          #          IFS='.' read -r major minor patch <<< "${TAG//v/}"

          # Simulate the logic of incrementing version (using commit messages)
          #          if git log -1 --pretty=%B | grep -q "BREAKING CHANGE"; then
          #            major=$((major + 1))
          #            minor=0
          #            patch=0
          #          elif git log -1 --pretty=%B | grep -q "feat"; then
          #            minor=$((minor + 1))
          #            patch=0
          #          elif git log -1 --pretty=%B | grep -q "fix"; then
          #            patch=$((patch + 1))
          #          fi

          # Create the new version tag
          #          new_version="v$major.$minor.$patch"
          #          echo "New version: $new_version"

        # Tag the commit with the new version
#          git tag $new_version
#          git push origin --tags

#      - name: Log in to Docker Hub
#        uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKER_USERNAME }}
#          password: ${{ secrets.DOCKER_PASSWORD }}
#
#      - name: Build Docker image
#        run: |
#          VERSION=$(git describe --tags --abbrev=0)  # Use the latest Git tag as version
#          IMAGE_NAME="${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:$VERSION"
#          docker build -t $IMAGE_NAME .
#
#      - name: Push Docker image to Docker Hub
#        run: |
#          VERSION=$(git describe --tags --abbrev=0)  # Use the latest Git tag as version
#          IMAGE_NAME="${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:$VERSION"
#          docker push $IMAGE_NAME
#